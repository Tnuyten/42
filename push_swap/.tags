!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
BFILES	Makefile	/^BFILES = $(SRCS) $(BONUS_SRCS)$/;"	m
BFILES	libft_proj/Makefile	/^BFILES = $(SRCS) $(BONUS_SRCS)$/;"	m
BONUS_OBJS	Makefile	/^BONUS_OBJS =	$(BFILES:.c=.o)$/;"	m
BONUS_OBJS	libft_proj/Makefile	/^BONUS_OBJS =	$(BFILES:.c=.o)$/;"	m
BONUS_SRCS	libft_proj/Makefile	/^BONUS_SRCS =			ft_lstnew.c \\$/;"	m
CC	Makefile	/^CC =			gcc$/;"	m
CC	libft_proj/Makefile	/^CC =			gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS =		-Wall -Wextra -Werror$/;"	m
CFLAGS	libft_proj/Makefile	/^CFLAGS =		-Wall -Wextra -Werror$/;"	m
FILES	Makefile	/^	FILES = $(SRCS) $(BONUS_SRCS)$/;"	m
FILES	Makefile	/^	FILES = $(SRCS)$/;"	m
FILES	libft_proj/Makefile	/^	FILES = $(SRCS) $(BONUS_SRCS)$/;"	m
FILES	libft_proj/Makefile	/^	FILES = $(SRCS)$/;"	m
LIBFT_H	libft_proj/libft.h	/^# define LIBFT_H$/;"	d
NAME	Makefile	/^NAME =			push_swap$/;"	m
NAME	libft_proj/Makefile	/^NAME =			libft.a$/;"	m
OBJS	Makefile	/^OBJS =			$(FILES:.c=.o)$/;"	m
OBJS	libft_proj/Makefile	/^OBJS =			$(FILES:.c=.o)$/;"	m
PUSH_SWAP_H	push_swap.h	/^# define PUSH_SWAP_H$/;"	d
QUEUE_H	queue.h	/^# define QUEUE_H$/;"	d
QUEUE_OPERATIONS_H	queue_operations.h	/^# define QUEUE_OPERATIONS_H$/;"	d
RM	Makefile	/^RM =			rm -f$/;"	m
RM	libft_proj/Makefile	/^RM =			rm -f$/;"	m
SORT_QUEUE_H	sort_queue.h	/^# define SORT_QUEUE_H$/;"	d
SORT_QUEUE_HELPERS_H	sort_queue_helpers.h	/^# define SORT_QUEUE_HELPERS_H$/;"	d
SRCS	Makefile	/^SRCS =				push_swap.c \\$/;"	m
SRCS	libft_proj/Makefile	/^SRCS =				ft_atoi.c \\$/;"	m
binary_size	sort_queue_helpers.c	/^int	binary_size(int num)$/;"	f
content	libft_proj/libft.h	/^	void			*content;$/;"	m	struct:s_list
count_words	libft_proj/ft_split.c	/^static size_t	count_words(char const *s, char c)$/;"	f	file:
fill_array	libft_proj/ft_split.c	/^static int	fill_array(char **res, const char *s, size_t len, char c)$/;"	f	file:
find_smallest	sort_queue_helpers.c	/^t_queue	*find_smallest(t_queue **root)$/;"	f
free_arr	libft_proj/ft_split.c	/^static void	free_arr(char **str)$/;"	f	file:
ft_atoi	libft_proj/ft_atoi.c	/^int	ft_atoi(const char *nptr)$/;"	f
ft_bzero	libft_proj/ft_bzero.c	/^void	ft_bzero(void *s, size_t n)$/;"	f
ft_calloc	libft_proj/ft_calloc.c	/^void	*ft_calloc(int count, size_t size)$/;"	f
ft_isalnum	libft_proj/ft_isalnum.c	/^int	ft_isalnum(int c)$/;"	f
ft_isalpha	libft_proj/ft_isalpha.c	/^int	ft_isalpha(int c)$/;"	f
ft_isascii	libft_proj/ft_isascii.c	/^int	ft_isascii(int c)$/;"	f
ft_isdigit	libft_proj/ft_isdigit.c	/^int	ft_isdigit(int c)$/;"	f
ft_isprint	libft_proj/ft_isprint.c	/^int	ft_isprint(int c)$/;"	f
ft_isspace	libft_proj/ft_atoi.c	/^static int	ft_isspace(int c)$/;"	f	file:
ft_itoa	libft_proj/ft_itoa.c	/^char	*ft_itoa(int n)$/;"	f
ft_lstadd_back	libft_proj/ft_lstadd_back.c	/^void	ft_lstadd_back(t_list **lst, t_list *new_lst)$/;"	f
ft_lstadd_front	libft_proj/ft_lstadd_front.c	/^void	ft_lstadd_front(t_list **lst, t_list *new_lst)$/;"	f
ft_lstclear	libft_proj/ft_lstclear.c	/^void	ft_lstclear(t_list **lst, void (*del)(void *))$/;"	f
ft_lstdelone	libft_proj/ft_lstdelone.c	/^void	ft_lstdelone(t_list *lst, void (*del)(void *))$/;"	f
ft_lstiter	libft_proj/ft_lstiter.c	/^void	ft_lstiter(t_list *lst, void (*f)(void *))$/;"	f
ft_lstlast	libft_proj/ft_lstlast.c	/^t_list	*ft_lstlast(t_list *lst)$/;"	f
ft_lstmap	libft_proj/ft_lstmap.c	/^t_list	*ft_lstmap(t_list *lst, void *(*f)(void *), void (*del)(void *))$/;"	f
ft_lstnew	libft_proj/ft_lstnew.c	/^t_list	*ft_lstnew(void *content)$/;"	f
ft_lstsize	libft_proj/ft_lstsize.c	/^int	ft_lstsize(t_list *lst)$/;"	f
ft_memchr	libft_proj/ft_memchr.c	/^void	*ft_memchr(const void *s, int c, size_t n)$/;"	f
ft_memcmp	libft_proj/ft_memcmp.c	/^int	ft_memcmp(const void *s1, const void *s2, size_t n)$/;"	f
ft_memcpy	libft_proj/ft_memcpy.c	/^void	*ft_memcpy(void *dst, const void *src, size_t n)$/;"	f
ft_memmove	libft_proj/ft_memmove.c	/^void	*ft_memmove(void *dst, const void *src, size_t len)$/;"	f
ft_memset	libft_proj/ft_memset.c	/^void	*ft_memset(void *b, int c, size_t len)$/;"	f
ft_putchar_fd	libft_proj/ft_putchar_fd.c	/^void	ft_putchar_fd(char c, int fd)$/;"	f
ft_putendl_fd	libft_proj/ft_putendl_fd.c	/^void	ft_putendl_fd(char *s, int fd)$/;"	f
ft_putnbr_fd	libft_proj/ft_putnbr_fd.c	/^void	ft_putnbr_fd(int n, int fd)$/;"	f
ft_putstr_fd	libft_proj/ft_putstr_fd.c	/^void	ft_putstr_fd(char *s, int fd)$/;"	f
ft_split	libft_proj/ft_split.c	/^char	**ft_split(char const *s, char c)$/;"	f
ft_strchr	libft_proj/ft_strchr.c	/^char	*ft_strchr(const char *s, int c)$/;"	f
ft_strdup	libft_proj/ft_strdup.c	/^char	*ft_strdup(const char *s1)$/;"	f
ft_striteri	libft_proj/ft_striteri.c	/^void	ft_striteri(char *s, void (*f)(unsigned int, char*))$/;"	f
ft_strjoin	libft_proj/ft_strjoin.c	/^char	*ft_strjoin(char const *s1, char const *s2)$/;"	f
ft_strlcat	libft_proj/ft_strlcat.c	/^size_t	ft_strlcat(char *dst, const char *src, size_t dstsize)$/;"	f
ft_strlcpy	libft_proj/ft_strlcpy.c	/^size_t	ft_strlcpy(char *dst, const char *src, size_t dstsize)$/;"	f
ft_strlen	libft_proj/ft_strlen.c	/^size_t	ft_strlen(const char *c)$/;"	f
ft_strmapi	libft_proj/ft_strmapi.c	/^char	*ft_strmapi(char const *s, char (*f)(unsigned int, char))$/;"	f
ft_strncmp	libft_proj/ft_strncmp.c	/^int	ft_strncmp(const char *s1, const char *s2, size_t n)$/;"	f
ft_strnstr	libft_proj/ft_strnstr.c	/^char	*ft_strnstr(const char *haystack, const char *needle, size_t len)$/;"	f
ft_strrchr	libft_proj/ft_strrchr.c	/^char	*ft_strrchr(const char *s, int c)$/;"	f
ft_strtrim	libft_proj/ft_strtrim.c	/^char	*ft_strtrim(char const *s1, char const *set)$/;"	f
ft_substr	libft_proj/ft_substr.c	/^char	*ft_substr(char const *s, unsigned int start, size_t len)$/;"	f
ft_tolower	libft_proj/ft_tolower.c	/^int	ft_tolower(int c)$/;"	f
ft_toupper	libft_proj/ft_toupper.c	/^int	ft_toupper(int c)$/;"	f
get_end_index	libft_proj/ft_split.c	/^static char	*get_end_index(char const *s, char c)$/;"	f	file:
has_duplicates	push_swap.c	/^int	has_duplicates(t_queue *queue)$/;"	f
in_set	libft_proj/ft_strtrim.c	/^static int	in_set(char c, char const *set)$/;"	f	file:
is_sorted	sort_queue_helpers.c	/^int	is_sorted(t_queue *root)$/;"	f
main	push_swap.c	/^int	main(int argc, char **argv)$/;"	f
n_length	libft_proj/ft_itoa.c	/^static int	n_length(int n)$/;"	f	file:
next	libft_proj/libft.h	/^	struct s_list	*next;$/;"	m	struct:s_list	typeref:struct:s_list::s_list
next	queue.h	/^	struct s_queue	*next;$/;"	m	struct:s_queue	typeref:struct:s_queue::s_queue
normal_sort	sort_queue_helpers.c	/^void	normal_sort(t_queue **root)$/;"	f
normalize	sort_queue_helpers.c	/^void normalize(t_queue **root)$/;"	f
number	queue.h	/^	int				number;$/;"	m	struct:s_queue
pa	queue_operations.c	/^void	pa(t_queue **a, t_queue **b)$/;"	f
parse_input	push_swap.c	/^int	parse_input(t_queue **a, int argc, char **argv)$/;"	f
pb	queue_operations.c	/^void	pb(t_queue **a, t_queue **b)$/;"	f
print_queue	debug.c	/^void	print_queue(char *name, t_queue *queue)$/;"	f
queue_addback	queue.c	/^void	queue_addback(t_queue **root, t_queue *new_queue)$/;"	f
queue_addfront	queue.c	/^void	queue_addfront(t_queue **root, t_queue *new_queue)$/;"	f
queue_clear	queue.c	/^void	queue_clear(t_queue **root)$/;"	f
queue_copy	queue.c	/^t_queue	*queue_copy(t_queue *root)$/;"	f
queue_delone	queue.c	/^void	queue_delone(t_queue *queue)$/;"	f
queue_index	queue.c	/^int	queue_index(t_queue **root, t_queue *target)$/;"	f
queue_last	queue.c	/^t_queue	*queue_last(t_queue *queue)$/;"	f
queue_new	queue.c	/^t_queue	*queue_new(int num)$/;"	f
queue_size	queue.c	/^int	queue_size(t_queue *queue)$/;"	f
ra	queue_operations.c	/^void	ra(t_queue **a)$/;"	f
radix_sort	sort_queue.c	/^void	radix_sort(t_queue **a, t_queue **b)$/;"	f
rb	queue_operations.c	/^void	rb(t_queue **b)$/;"	f
rr	queue_operations.c	/^void	rr(t_queue **a, t_queue **b)$/;"	f
rra	queue_operations.c	/^void	rra(t_queue **a)$/;"	f
rrb	queue_operations.c	/^void	rrb(t_queue **b)$/;"	f
rrr	queue_operations.c	/^void	rrr(t_queue **a, t_queue **b)$/;"	f
s_list	libft_proj/libft.h	/^typedef struct s_list$/;"	s
s_queue	queue.h	/^typedef struct s_queue$/;"	s
sa	queue_operations.c	/^void	sa(t_queue **a)$/;"	f
sb	queue_operations.c	/^void	sb(t_queue **b)$/;"	f
smallest_first	sort_queue.c	/^void	smallest_first(t_queue **a, t_queue **b)$/;"	f
sort	sort_queue.c	/^void	sort(t_queue **a, t_queue **b)$/;"	f
sort_five	sort_queue.c	/^void	sort_five(t_queue **a, t_queue **b)$/;"	f
sort_three	sort_queue.c	/^void	sort_three(t_queue **a)$/;"	f
ss	queue_operations.c	/^void	ss(t_queue **a, t_queue **b)$/;"	f
t_list	libft_proj/libft.h	/^}	t_list;$/;"	t	typeref:struct:s_list
t_queue	queue.h	/^}	t_queue;$/;"	t	typeref:struct:s_queue
